# -*- coding: utf-8 -*-
"""python_task_1.ipy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lnr6MHMMz5LPugnY9ArVZ9KJ78MXLpcs
"""

import pandas as pd
def generate_car_matrix(dataset_path)->pd.DataFrame:
    """
    Creates a DataFrame  for id combinations.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Matrix generated with 'car' values,
                          where 'id_1' and 'id_2' are used as indices and columns respectively.
    """
    # Write your logic here
    # Reading the CSV file into a DataFrame
    df = pd.read_csv(dataset-1)

    matrix_df = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)

    for index in matrix_df.index:
        matrix_df.at[index, index] = 0

    return matrix_df

def get_type_count(dataset_path)->dict():
    """
    Categorizes 'car' values into types and returns a dictionary of counts.

    Args:
        df (pandas.DataFrame)

    Returns:
        dict: A dictionary with car types as keys and their counts as values.
    """
    # Write your logic here

    # Load the dataset into a DataFrame
    df = pd.read_csv(dataset-1)
    # Add a new categorical column 'car_type'
    df['car_type'] = pd.cut(df['car'],
                            bins=[float('-inf'), 15, 25, float('inf')],
                            labels=['low', 'medium', 'high'],
                            right=False)

    type_count = df['car_type'].value_counts().to_dict()
    sorted_type_count = dict(sorted(type_count.items()))

    return sorted_type_count

def get_bus_indexes(dataset_path)->list:
    """
    Returns the indexes where the 'bus' values are greater than twice the mean.

    Args:
        df (pandas.DataFrame)

    Returns:
        list: List of indexes where 'bus' values exceed twice the mean.
    """
    # Write your logic here

    # Load the dataset into a DataFrame
    df = pd.read_csv(dataset-1)

    mean_bus_value = df['bus'].mean()
    bus_indexes = df[df['bus'] > 2 * mean_bus_value].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

def filter_routes(dataset_path)->list:
    """
    Filters and returns routes with average 'truck' values greater than 7.

    Args:
        df (pandas.DataFrame)

    Returns:
        list: List of route names with average 'truck' values greater than 7.
    """
    # Write your logic here

    # Load the dataset into a DataFrame
    df = pd.read_csv(dataset-1)

    routes_filtered = df.groupby('route')['truck'].mean()
    routes_filtered = routes_filtered[routes_filtered > 7].index.tolist()

    routes_filtered.sort()

    return routes_filtered

def multiply_matrix(input_matrix)->pd.DataFrame:
    """
    Multiplies matrix values with custom conditions.

    Args:
        matrix (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Modified matrix with values multiplied based on custom conditions.
    """
    # Write your logic here
    # Copy the input matrix to avoid modifying the original DataFrame
    modified_matrix = input_matrix.copy()

    modified_matrix[modified_matrix > 20] *= 0.75
    modified_matrix[(modified_matrix <= 20) & (modified_matrix > 0)] *= 1.25
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

def time_check(df)->pd.Series:
    """
    Use shared dataset-2 to verify the completeness of the data by checking whether the timestamps for each unique (`id`, `id_2`) pair cover a full 24-hour and 7 days period

    Args:
        df (pandas.DataFrame)

    Returns:
        pd.Series: return a boolean series
    """
    # Write your logic here
    # Convert 'timestamp' columns to datetime format
    df['start_timestamp'] = pd.to_datetime((df['startDay'] + ' ' + df['startTime']),format='%A %H:%M:%S')
    df['end_timestamp'] = pd.to_datetime((df['endDay'] + ' ' + df['endTime']),format='%A %H:%M:%S')
    df['start_day_of_week'] = df['start_timestamp'].dt.day_name()
    df['start_time_of_day'] = df['start_timestamp'].dt.time

    df['end_day_of_week'] = df['end_timestamp'].dt.day_name()
    df['end_time_of_day'] = df['end_timestamp'].dt.time

    is_valid = (
        (df['start_day_of_week'].nunique() == 7) &
        (df['end_day_of_week'].nunique() == 7) &
        (df.groupby(['id', 'id_2'])['start_time_of_day'].nunique() == 1440) &
        (df.groupby(['id', 'id_2'])['end_time_of_day'].nunique() == 1440)
    )

    return is_valid